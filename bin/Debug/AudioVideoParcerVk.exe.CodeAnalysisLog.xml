<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="D:\Projects\VideoParcerVk\AudioVideoParcerVk\bin\Debug\AudioVideoParcerVk.exe">
   <Modules>
    <Module Name="audiovideoparcervk.exe">
     <Namespaces>
      <Namespace Name="AudioVideoParcerVk.ViewModel">
       <Types>
        <Type Name="AudioViewModel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#UnloadCSVExecute()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-10-09 06:02:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Projects\VideoParcerVk\AudioVideoParcerVk\ViewModel" File="AudioViewModel.cs" Line="355">Object 'streamWriter' can be disposed more than once in method 'AudioViewModel.UnloadCSVExecute()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 355</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GroupsViewModel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2017-10-09 06:02:24Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="D:\Projects\VideoParcerVk\AudioVideoParcerVk\ViewModel" File="GroupsViewModel.cs" Line="32">'GroupsViewModel.GroupsViewModel()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;GroupsViewModel..ctor()&#xD;&#xA;GroupsViewModel.set_CheckGetId(Boolean):Void&#xD;&#xA;ObservableObject.RaisePropertyChanged(String):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnloadCSVExecute()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-10-09 06:02:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Projects\VideoParcerVk\AudioVideoParcerVk\ViewModel" File="GroupsViewModel.cs" Line="370">Object 'streamWriter' can be disposed more than once in method 'GroupsViewModel.UnloadCSVExecute()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 370</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MainViewModel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(AudioVideoParcerVk.Model.IDataService)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2017-10-09 06:02:24Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="D:\Projects\VideoParcerVk\AudioVideoParcerVk\ViewModel" File="MainViewModel.cs" Line="30">'MainViewModel.MainViewModel(IDataService)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;MainViewModel..ctor(IDataService)&#xD;&#xA;MainViewModel.set_ProgressBarBool(Boolean):Void&#xD;&#xA;ObservableObject.RaisePropertyChanged(String):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NewsViewModel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#UnloadCSVExecute()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-10-09 06:02:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Projects\VideoParcerVk\AudioVideoParcerVk\ViewModel" File="NewsViewModel.cs" Line="370">Object 'streamWriter' can be disposed more than once in method 'NewsViewModel.UnloadCSVExecute()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 370</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="VideoViewModel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#UnloadCSVExecute()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-10-09 06:02:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Projects\VideoParcerVk\AudioVideoParcerVk\ViewModel" File="VideoViewModel.cs" Line="371">Object 'streamWriter' can be disposed more than once in method 'VideoViewModel.UnloadCSVExecute()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 371</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ContactsParserLinkedin.Services">
       <Types>
        <Type Name="IMsgService" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PublishEvent" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2017-10-09 06:02:24Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'mydelegate' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>Declare event handlers correctly</Name>
   <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
   <Resolution Name="Second">Declare the second parameter of {0} as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182133.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 371</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
